#include <SoftwareSerial.h>
#include <DFPlayerMini_Fast.h>
#include <SharpDistSensor.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1331.h>
#include <Servo.h>
#include <SPI.h>

const int stopPin = 2;
const int playPin = 3;
const int skipPin = 4;
const int potentiometer = A1;

const byte sensorPin = A0;

#define cs 5
#define dc 7
#define rst 8
#define mosi A5
#define sclk A4

const int RightEyePin = 6;
const int LeftEyePin = 9;

const int ArmServoPin = 10;
const int WristServoPin = 11;

// Servos
Servo RightEye;
Servo LeftEye;

Servo ArmServo;
Servo WristServo;

// DFPlayer Mini
int playRead = 0;
int skipRead = 0;
int stopRead = 0;
int currentTrack = 1;
int numOfSongs;

SoftwareSerial mySoftwareSerial(12, 13);
DFPlayerMini_Fast mp3module;

// Sharp IR
const byte medianFilterWindowSize = 5;
SharpDistSensor sensor(sensorPin, medianFilterWindowSize);

int sampleCounter = 0;
const int threshold = 800;


enum State {
  INIT,
  FIRST_DROP,
  FIRST_PEAK,
  SECOND_DROP,
  SECOND_PEAK
};

State currentState = INIT;

// OLED
Adafruit_SSD1331 display = Adafruit_SSD1331(cs, dc, mosi, sclk, rst);

const unsigned char epd_bitmap_New_Project [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x10, 0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x09, 0x20, 0x01, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 
	0x21, 0x01, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0xc4, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x1f, 0xf0, 0x21, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3c, 
	0x78, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x19, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1c, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x60, 
	0x0d, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1c, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x30, 0x19, 0x80, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3c, 
	0x78, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1f, 0xf0, 0x20, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0xc4, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 
	0x21, 0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x21, 0x08, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x40, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe0, 0x50, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe0, 0xd0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x70, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe1, 0x10, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xd0, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe1, 0x50, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x50, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe0, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned int bitmapWidth = 96;
const unsigned int bitmapHeight = 64;
const unsigned int bitmapSize = bitmapWidth * bitmapHeight / 8; 

void setup() {
  // Initialize OLED display with SPI
  display.begin();
  display.setRotation(0); 
  display.fillRect(0, 0, display.width(), display.height(), 0); // Fill with black

  // Draw bitmap
  for (unsigned int y = 0; y < bitmapHeight; y++) {
    for (unsigned int x = 0; x < bitmapWidth; x++) {
      unsigned int index = y * (bitmapWidth / 8) + (x / 8);
      unsigned int bit = 7 - (x % 8);
      unsigned char pixel = pgm_read_byte(&epd_bitmap_New_Project[index]);
      if ((pixel & (1 << bit))) {
        display.drawPixel(x, y, 0XFFE0); // Draw yellow pixel
      }
    }
  }

  // Arm Servos
  ArmServo.attach(ArmServoPin);
  WristServo.attach(WristServoPin);
  delay(100);
  ArmServo.write(90);
  WristServo.write(150);
  delay(500);
  ArmServo.detach();
  WristServo.detach();

  // Eye Servos
  LeftEye.attach(LeftEyePin);
  RightEye.attach(RightEyePin);  
  delay(100);
  LeftEye.write(90+11.5);
  RightEye.write(85-11.5);

  delay(500);
  moveEyes();
  delay(500);
  
  LeftEye.detach();
  RightEye.detach();

  // DFPlayer Mini
  Serial.begin(9600);
  mySoftwareSerial.begin(9600);
  mp3module.begin(mySoftwareSerial);

  pinMode(playPin, INPUT_PULLUP);
  pinMode(skipPin, INPUT_PULLUP);
  pinMode(stopPin, INPUT_PULLUP);

  Serial.println(F("Initializing DFPlayer ... (May take 3~5 seconds)"));
  
  if (!mp3module.begin(mySoftwareSerial, false)) { 
    Serial.println("Unable to connect to module!");
    Serial.println("Check cable connections and");
    Serial.println("make sure SD Card is inserted");
    while(1);
  }
  
  Serial.println("Successfully connected to DFPlayer Mini");

  delay(100);
  numOfSongs = mp3module.numTracksInFolder(1);
  mp3module.sleep();
  delay(1000);

  randomSeed(analogRead(A2));
}

void loop() {

  // DFPlayer Mini
  int volume = map(analogRead(potentiometer), 5, 1010, 0, 30);
  volume = constrain(volume, 0, 30);
  mp3module.volume(volume);

  playRead = digitalRead(playPin);
  skipRead = digitalRead(skipPin);
  stopRead = digitalRead(stopPin);

  if (stopRead == LOW) {
    Serial.println("Stopping track " + String(currentTrack));
    mp3module.stop();
    delay(100);
    mp3module.sleep();
    delay(500);
  }

  else if (playRead == LOW) {
    if (!mp3module.isPlaying()) {
      Serial.println("Playing track " + String(currentTrack));
      mp3module.wakeUp();
      mp3module.playFolder(1, currentTrack);
    } 
    
    // Pause Conditions
    else {
      if (mp3module.isPlaying())
      {
        mp3module.pause();
        Serial.println("Pausing track " + String(currentTrack));
      }

      else 
      {
        mp3module.resume();
        Serial.println("Resuming track " + String(currentTrack));
      }
    }

    delay(500);
  }

  else if (skipRead == LOW) {
    currentTrack = (currentTrack++ % numOfSongs) + 1;
    if (mp3module.isPlaying()) {
      mp3module.playFolder(1, currentTrack);
    }
    Serial.println("Skipping to track " + String(currentTrack));
    delay(500);
  }

  Serial.println("Current Track : " +String(currentTrack) + "  |  State : " + String(mp3module.isPlaying()));

  // Sharp IR Sensor
  if(!mp3module.isPlaying()) {
    unsigned int distance = sensor.getDist();

    switch (currentState) {
      case INIT:
        if (distance < threshold) {
          currentState = FIRST_DROP;
        }
        break;

      case FIRST_DROP:
        if (distance > threshold) {
          currentState = FIRST_PEAK;
        }
        break;

      case FIRST_PEAK:
        if (distance < threshold) {
          currentState = SECOND_DROP;
        }
        break;

      case SECOND_DROP:
        if (distance > threshold) {
          currentState = SECOND_PEAK;
        }
        break;

      case SECOND_PEAK:
        // Wave Detected
        if (distance < threshold) {
          wave();
          delay(500); 
          playRandomVoiceLine();
          delay(500);
          moveEyes();
          currentState = INIT;
        }
        break;
    }

    if (sampleCounter == 30) {
      currentState = INIT;
      sampleCounter = 0;
    } else {
      sampleCounter++;
    }
    // Serial.print(500);
    // Serial.print(", ");
    // Serial.print(0);
    // Serial.print(", ");
    // Serial.println(distance);
  }
  
  delay(20);
}

void moveEyes() { 
  Serial.println("Eyes Moved Up");
  LeftEye.attach(LeftEyePin);
  RightEye.attach(RightEyePin);
  LeftEye.write(90+51);
  RightEye.write(85-51);

  delay(250);
  LeftEye.detach();
  RightEye.detach();
  delay(250);

  LeftEye.attach(LeftEyePin);
  RightEye.attach(RightEyePin);
  Serial.println("Eyes Moved Down");
  LeftEye.write(90+11.5);
  RightEye.write(85-11.5);

  delay(250);
  LeftEye.detach();
  RightEye.detach();
  delay(250);

  LeftEye.attach(LeftEyePin);
  RightEye.attach(RightEyePin);
  Serial.println("Eyes Moved Up");
  LeftEye.write(90+51);
  RightEye.write(85-51);

  delay(250);
  LeftEye.detach();
  RightEye.detach();
  delay(250);

  LeftEye.attach(LeftEyePin);
  RightEye.attach(RightEyePin);
  Serial.println("Eyes Moved Down");
  LeftEye.write(90+11.5);
  RightEye.write(85-11.5);

  delay(250);
  LeftEye.detach();
  RightEye.detach();
}

void wave() { 
  ArmServo.attach(ArmServoPin);
  ArmServo.write(90+70);
  Serial.println("Arm Moved Up");
 
  delay(500);
  ArmServo.detach();
  delay(1000);

  WristServo.attach(WristServoPin);
  WristServo.write(90-45);
  Serial.println("Wrist Turn Down");
  
  delay(500);
  WristServo.detach();
  delay(250);

  WristServo.attach(WristServoPin);
  WristServo.write(150);
  Serial.println("Wrist Turn Up");

  delay(500);
  WristServo.detach();
  delay(250);

  WristServo.attach(WristServoPin);
  WristServo.write(90-45);
  Serial.println("Wrist Turn Down");
  
  delay(500);
  WristServo.detach();
  delay(250);

  WristServo.attach(WristServoPin);
  WristServo.write(150);
  Serial.println("Wrist Turn Up");

  delay(500);
  WristServo.detach();
  delay(1500); 

  ArmServo.attach(ArmServoPin);
  ArmServo.write(90);
  Serial.println("Arm Moved Down");        
  delay(500);
  ArmServo.detach();
}

void playRandomVoiceLine() {
  mp3module.wakeUp();
  
  int sayWallEChance = random(1 , 100);
  if(sayWallEChance <= 20) 
    mp3module.playFolder(2, 1);

  else {
    int randomVoiceLine = random(2, 19);
    mp3module.playFolder(2, randomVoiceLine);
  }
    
  delay(3000);
  mp3module.sleep();          
}