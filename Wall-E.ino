#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"
#include <SharpDistSensor.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1331.h>
#include <SPI.h>

#define cs 10
#define rst 9
#define dc 8

const int playPin = 13;
const int skipPin = 12;
const int pausePin = 11;
const int potentiometer = 5;

int playRead = 0;
int skipRead = 0;
int pauseRead = 0;
int currentTrack = 1;

const byte sensorPin = A0;

// Change these pin numbers
SoftwareSerial mySoftwareSerial(4, 5);
DFRobotDFPlayerMini mp3module;

const byte medianFilterWindowSize = 5;
SharpDistSensor sensor(sensorPin, medianFilterWindowSize);

int sampleCounter = 0;
const int threshold = 390;

enum State
{
  INIT,
  FIRST_DROP,
  FIRST_PEAK,
  SECOND_DROP,
  SECOND_PEAK
};

State currentState = INIT;

Adafruit_SSD1331 display = Adafruit_SSD1331(cs, dc, rst);

const unsigned char epd_bitmap_New_Project[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff,
    0xff, 0xff, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf0, 0x78, 0x70,
    0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x70, 0xe1, 0xc3, 0x87, 0x0e,
    0x1c, 0x38, 0x00, 0xff, 0xff, 0xf0, 0xf8, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff,
    0xff, 0xff, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf0, 0xf8, 0x70,
    0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x70, 0xe1, 0xc3, 0x87, 0x0e,
    0x1c, 0x38, 0x00, 0xff, 0xff, 0xff, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff,
    0xff, 0xff, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf0, 0x78, 0x70,
    0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x70, 0xe1, 0xc3, 0x87, 0x0e,
    0x1c, 0x38, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff,
    0xff, 0xf5, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf5, 0x78, 0x70,
    0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf0, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e,
    0x1c, 0x38, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff,
    0xff, 0xf4, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf7, 0x78, 0x70,
    0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf0, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e,
    0x1c, 0x38, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff,
    0xff, 0xf1, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf4, 0xf8, 0x70,
    0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf0, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e,
    0x1c, 0x38, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff,
    0xff, 0xf0, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf5, 0xf8, 0x70,
    0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xf0, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e,
    0x1c, 0x38, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff,
    0xff, 0xf0, 0x78, 0x70, 0xe1, 0xc3, 0x87, 0x0e, 0x1c, 0x38, 0x00, 0xff, 0xff, 0xfd, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xf7, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x7f, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xef, 0x7b, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xfb, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x7f, 0x7b,
    0x6f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0xff, 0xbf, 0xfe, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xdc, 0x1d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfb, 0xf0, 0x07, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7d, 0xe1,
    0xc3, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0xfe, 0x67, 0xf3, 0x3f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xcf, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xcf, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x4f,
    0xf9, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xcf, 0xf9, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xcf, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfe, 0x67, 0xf3, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7d, 0xe1,
    0xc3, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x7b, 0xf0, 0x07, 0xef, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xdc, 0x1d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x7f, 0x7b,
    0x6f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x7f, 0xfb, 0x6f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x7f, 0xf7, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xef, 0x7b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

const unsigned int bitmapWidth = 96;
const unsigned int bitmapHeight = 64;
const unsigned int bitmapSize = bitmapWidth * bitmapHeight / 8; // Calculate bitmap size in bytes

void setup() {
  Serial.begin(9600);
  mySoftwareSerial.begin(9600);

  pinMode(playPin, INPUT);
  pinMode(skipPin, INPUT);
  pinMode(pausePin, INPUT);

  Serial.println(F("Initializing DFPlayer ..."));

  if (!mp3module.begin(mySoftwareSerial)) {
    Serial.println("Unable to connect to module!");
    Serial.println("Check cable connections and");
    Serial.println("make sure SD Card is inserted");
    while (1);
  }

  Serial.println("Succesfully connected to DFPlayer Mini");

  mp3module.setTimeOut(500);
  // mp3module.volume(17);
  mp3module.EQ(DFPLAYER_EQ_NORMAL);
  mp3module.outputDevice(DFPLAYER_DEVICE_SD);

  // Initialize OLED display with SPI
  display.begin();
  display.setRotation(0);                                       // Adjust rotation if needed
  display.fillRect(0, 0, display.width(), display.height(), 0); // Fill with black

  // Draw bitmap
  for (unsigned int y = 0; y < bitmapHeight; y++)
  {
    for (unsigned int x = 0; x < bitmapWidth; x++)
    {
      unsigned int index = y * (bitmapWidth / 8) + (x / 8);
      unsigned int bit = 7 - (x % 8);
      unsigned char pixel = pgm_read_byte(&epd_bitmap_New_Project[index]);
      if (!(pixel & (1 << bit)))
      {
        display.drawPixel(x, y, 0XFFE0); // Draw yellow pixel
      }
    }
  }

  delay(100);
}

void loop()
{
  int volume = map(analogRead(potentiometer), 5, 1010, 0, 30);
  mp3module.volume(volume);

  playRead = digitalRead(playPin);
  skipRead = digitalRead(skipPin);
  pauseRead = digitalRead(pausePin);

  // 512 Not Playing
  // 513 Playing
  // 514 Paused

  if (playRead == HIGH)
  {
    if (mp3module.readState() == 512)
    {
      Serial.println("Playing track " + String(currentTrack));
      mp3module.play(currentTrack);
    }

    else
    {
      Serial.println("Stopping track " + String(currentTrack));
      mp3module.stop();
    }

    delay(500);
  }

  else if (skipRead == HIGH)
  {
    currentTrack = (currentTrack++ % 3) + 1;
    if (mp3module.readState() == 513 || mp3module.readState() == 514)
      mp3module.play(currentTrack);
    Serial.println("Skipping to track " + String(currentTrack));
    delay(500);
  }

  else if (pauseRead == HIGH)
  {
    // Consider switching to a switch statement
    if (mp3module.readState() == 512)
    {
      mp3module.play(currentTrack);
      Serial.println("Playing track " + String(currentTrack));
    }

    else if (mp3module.readState() == 513)
    {
      mp3module.pause();
      Serial.println("Pausing track " + String(currentTrack));
    }

    else if (mp3module.readState() == 514)
    {
      mp3module.start();
      Serial.println("Resuming track " + String(currentTrack));
    }

    delay(500);
  }

  // Serial.println(String(volume));
  Serial.println(String(mp3module.readState()));
}