#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1331.h>

// #define sclk 13
// #define mosi 11
#define cs   10
#define rst  9
#define dc   8

// Adafruit_SSD1331 display = Adafruit_SSD1331(cs, dc, mosi, sclk, rst);
Adafruit_SSD1331 display = Adafruit_SSD1331(cs, dc, rst);


// 'New Project', 96x64px
const unsigned char epd_bitmap_New_Project [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x10, 0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x09, 0x20, 0x01, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 
	0x21, 0x01, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0xc4, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x1f, 0xf0, 0x21, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3c, 
	0x78, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x19, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1c, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x60, 
	0x0d, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1c, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x30, 0x19, 0x80, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3c, 
	0x78, 0x41, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1f, 0xf0, 0x20, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0xc4, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 
	0x21, 0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x21, 0x08, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x40, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe0, 0x50, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe0, 0xd0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x70, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe1, 0x10, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xd0, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe1, 0x50, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x50, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe0, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 
	0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 
	0xf1, 0xe1, 0xf0, 0x00, 0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 
	0x00, 0xff, 0xe3, 0xc7, 0x8f, 0x1e, 0x3c, 0x78, 0xf1, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned int bitmapWidth = 96;
const unsigned int bitmapHeight = 64;
const unsigned int bitmapSize = bitmapWidth * bitmapHeight / 8; // Calculate bitmap size in bytes

void setup() {
    // Initialize OLED display with SPI
    display.begin();
    display.setRotation(0); // Adjust rotation if needed
    display.fillRect(0, 0, display.width(), display.height(), 0); // Fill with black

    // Draw bitmap
    for (unsigned int y = 0; y < bitmapHeight; y++) {
        for (unsigned int x = 0; x < bitmapWidth; x++) {
            unsigned int index = y * (bitmapWidth / 8) + (x / 8);
            unsigned int bit = 7 - (x % 8);
            unsigned char pixel = pgm_read_byte(&epd_bitmap_New_Project[index]);
            if ((pixel & (1 << bit))) {
                display.drawPixel(x, y, 0XFFE0); // Draw yellow pixel
            }
        }
    }
}

void loop() {
    // Leave empty if no looping behavior is needed
}
